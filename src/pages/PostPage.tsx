import "../styles/PostList.scss";
import TemplatePage from "./TemplatePage";
import { PostProps, PostCard } from "../components/PostCard";
import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { setSelectedImage } from "../redux/imagePopUpReducer";
import { ImageModal } from "../components/ImageModal";

const PostPage = () => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
  const { postId } = useParams();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–∫–∏
  const [post, setPost] = useState<PostProps | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—É–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ Redux
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // –•—É–∫ useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchPost = async () => {
      setIsLoading(true);
      setError(null);

      try {
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        const response = await fetch(
          `https://jsonplaceholder.org/posts/${postId}`
        );

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—à–∏–±–∫–∞
        if (!response.ok) {
          throw new Error("Error loading the post");
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ JSON
        const data = await response.json();
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å—Ç–∞
        setPost(data);
      } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
        setError("Error loading the post");
        console.error("Error loading the post:", error);
      } finally {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        setIsLoading(false);
      }
    };

    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ fetchPost
    fetchPost();
  }, [postId]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –ø–æ—Å—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  const handleOpenImagePopUp = () => {
    if (post?.image) {
      dispatch(setSelectedImage(post.image));
    }
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ—à–∏–±–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
  if (isLoading) {
    return <div>Post is loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!post) {
    return <div className="post-empty">No posts found üò≠</div>;
  }

  return (
    <TemplatePage title={post.title}>
      <div className="post-single">
        <PostCard
          content={post.content}
          id={post.id}
          publishedAt={post.publishedAt}
          title={post.title}
          image={post.image}
          key={post.id}
          onImageClick={handleOpenImagePopUp} 
        />
        <button onClick={() => navigate("/posts")} className="buttonBack">
          Return to posts
        </button>
      </div>
      <ImageModal /> 
    </TemplatePage>
  );
};

export default PostPage;