import "../styles/PostList.scss";
import TemplatePage from "./TemplatePage";
import { PostCard } from "../components/PostCard";
import { useParams, useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import { setSelectedImage } from "../redux/imagePopUpReducer";
import { ImageModal } from "../components/ImageModal";
import { RootState, useAppDispatch } from "../redux/store";
import { useEffect } from "react";
import { fetchPostById } from "../thunk/fetchPostById";

const PostPage = () => {
  const { postId } = useParams();
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ singlePostReducer
  const { post, loading, error } = useSelector(
    (state: RootState) => state.singlePostReducer
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  const handleOpenImagePopUp = () => {
    if (post?.image) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const img = new Image();
      img.onload = () => {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ, –¥–∏—Å–ø–∞—Ç—á–∏–º —ç–∫—à–µ–Ω
        dispatch(setSelectedImage(post.image));
      };
      img.onerror = () => {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        dispatch(setSelectedImage("/fallback.png"));
      };
      img.src = post.image;
    }
  };

  useEffect(() => {
    window.scrollTo(0, 0);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç –ø–æ ID
    dispatch(fetchPostById(parseInt(postId!, 10)));
  }, [dispatch, postId]); 

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏
  if (loading) {
    return (
      <div className="post__loading">
        <div className="spinner"></div>
      </div>
    );
  }

  if (error) {
    return <div className="post__error">Error loading post: {error}</div>;
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
  if (post) {
    return (
      <TemplatePage title={post.title}>
        <div className="post-single">
          <PostCard
            description={post.description || (post.text || "")}
            id={post.id}
            date={post.date}
            title={post.title}
            image={post.image}
            key={post.id}
            onImageClick={handleOpenImagePopUp}
          />
          <button onClick={() => navigate("/posts")} className="buttonBack">
            Return to posts
          </button>
        </div>
        <ImageModal />
      </TemplatePage>
    );
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
  return (
    <div className="empty-post">
      <div className="post-empty">No posts found üò≠</div>
      <button onClick={() => navigate("/posts")} className="buttonBack">
        Return to posts
      </button>
    </div>
  );
};

export default PostPage;