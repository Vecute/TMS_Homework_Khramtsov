import "../styles/PostList.scss";
import TemplatePage from "./TemplatePage";
import { PostProps, PostCard } from "../components/PostCard";
import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";

const PostPage = () => {
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–∞ useParams –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ postId –∏–∑ URL
  const { postId } = useParams();
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–∞ useState –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  const [post, setPost] = useState<PostProps | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–∞ useNavigate –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const navigate = useNavigate();

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—É–∫–∞ useEffect –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchPost = async () => {
      setIsLoading(true);
      setError(null);

      try {
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        const response = await fetch(
          `https://jsonplaceholder.org/posts/${postId}`
        );

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—à–∏–±–∫–∞
        if (!response.ok) {
          throw new Error("Error loading the post");
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ JSON
        const data = await response.json();
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å—Ç–∞
        setPost(data);
      } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
        setError("Error loading the post");
        console.error("Error loading the post:", error);
      } finally {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        setIsLoading(false);
      }
    };

    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ fetchPost
    fetchPost();
  }, [postId]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç postId

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  if (isLoading) {
    return <div>Post is loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  if (!post) {
    return <div className="post-empty">No posts found üò≠</div>;
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
  return (
    <TemplatePage title={post.title}>
      <div className="post-single">
        <PostCard
          content={post.content}
          id={post.id}
          publishedAt={post.publishedAt}
          title={post.title}
          image={post.image}
          key={post.id}
        />
        <button onClick={() => navigate("/posts")} className="buttonBack">
          Return to posts
        </button>
      </div>
    </TemplatePage>
  );
};

export default PostPage;