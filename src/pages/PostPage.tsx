import "../styles/PostList.scss";
import TemplatePage from "./TemplatePage";
import { PostCard } from "../components/PostCard";
import { useParams, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { setSelectedImage } from "../redux/imagePopUpReducer";
import { ImageModal } from "../components/ImageModal";
import { RootState } from "../redux/store";
import { useEffect } from "react";

const PostPage = () => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ postId –∏–∑ URL —Å –ø–æ–º–æ—â—å—é useParams
  const { postId } = useParams();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—É–∫–∞ useNavigate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ navigate
  const navigate = useNavigate();
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—É–∫–∞ useDispatch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ dispatch
  const dispatch = useDispatch();
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Redux —Å –ø–æ–º–æ—â—å—é useSelector
  const posts = useSelector((state: RootState) => state.postsReducer.posts);

  // –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞ —Å ID, —Ä–∞–≤–Ω—ã–º postId, –≤ –º–∞—Å—Å–∏–≤–µ posts
  const post = posts.find((p) => p.id === parseInt(postId!, 10));

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  const handleOpenImagePopUp = () => {
    if (post?.image) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const img = new Image();
      img.onload = () => {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ, –¥–∏—Å–ø–∞—Ç—á–∏–º —ç–∫—à–µ–Ω
        dispatch(setSelectedImage(post.image));
      };
      img.onerror = () => {
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        dispatch(setSelectedImage("/fallback.png"));
      };
      img.src = post.image;
    }
  };

  useEffect(() => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –Ω–∞—á–∞–ª–æ (0, 0)
    window.scrollTo(0, 0);
  }, []);

  // –£—Å–ª–æ–≤–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  if (!posts.length) {
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    return (
      <div className="post__loading">
        <div className="spinner"></div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (post === undefined)...
  if (!post) {
    // ...—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    return (
      <div className="empty-post">
        <div className="post-empty">No posts found üò≠</div>
        <button onClick={() => navigate("/posts")} className="buttonBack">
          Return to posts
        </button>
      </div>
    );
  }

  return (
    <TemplatePage title={post.title}>
      <div className="post-single">
        <PostCard
          description={post.description || (post.text || '')}
          id={post.id}
          date={post.date}
          title={post.title}
          image={post.image}
          key={post.id}
          onImageClick={handleOpenImagePopUp}
        />
        <button onClick={() => navigate("/posts")} className="buttonBack">
          Return to posts
        </button>
      </div>
      <ImageModal />
    </TemplatePage>
  );
};

export default PostPage;
