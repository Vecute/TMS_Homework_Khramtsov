import "../styles/PostList.scss";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { PostCard, PostProps } from "./PostCard";
import { PostModal } from "./PostModal";
import { RootState, useAppDispatch } from "../redux/store";
import PostsLoader from "./PostsLoader";
import { fetchAllPosts } from "../thunk/fetchAllPosts";
import {
  setCurrentPage,
  setPostsPerPage,
  updateCurrentPagePosts,
} from "../redux/postsReducer";
import Pagination from "../services/pagination";

const PostList = () => {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ activeTab –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ ("all" –∏–ª–∏ "favorites")
  const [activeTab, setActiveTab] = useState<"all" | "favorites">("all");
  // –ü–æ–ª—É—á–∞–µ–º dispatch-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Redux
  const dispatch = useAppDispatch();

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Redux —Å –ø–æ–º–æ—â—å—é useSelector
  const { posts, loading, error, postsPerPage, currentPage } = useSelector(
    (state: RootState) => state.postsReducer
  );
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const favoritePosts = useSelector((state: RootState) => {
    const favorites = state.favoritesReducer;
    return state.postsReducer.allPosts.filter((post) => favorites[post.id]);
  });

  // –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const showPaginationAndSelector = activeTab === "all";

  // useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ dispatch
  useEffect(() => {
    const storedCurrentPage = localStorage.getItem("currentPage");

    dispatch(fetchAllPosts()).then(() => {
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ localStorage
      if (storedCurrentPage) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Redux
        dispatch(setCurrentPage(Number(storedCurrentPage)));
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      dispatch(updateCurrentPagePosts());
    });
  }, [dispatch]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  useEffect(() => {
    if (activeTab === "all") {
      dispatch(updateCurrentPagePosts());
    }
  }, [dispatch, activeTab, postsPerPage, currentPage]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const handlePostsPerPageChange = (
    e: React.ChangeEvent<HTMLSelectElement>
  ) => {
    dispatch(setPostsPerPage(Number(e.target.value)));
  };

  return (
    <div>
      <PostsLoader loading={loading} error={error} />{" "}
      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="post__tab-line">
        <button
          onClick={() => setActiveTab("all")}
          className={`post__tab ${activeTab === "all" ? "selected" : ""}`}
        >
          All
        </button>
        <button
          onClick={() => setActiveTab("favorites")}
          className={`post__tab ${activeTab === "favorites" ? "selected" : ""}`}
        >
          Favorites
        </button>
      </div>
      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ */}
      <div className="post-list">
        {/* –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "All", —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã */}
        {activeTab === "all" ? (
          <>
            {posts.length > 0 ? (
              posts.map((post) => <PostCard key={post.id} {...post} />)
            ) : (
              <div className="post__empty">There are no posts üò≠</div>
            )}
          </>
        ) : (
          // –ò–Ω–∞—á–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
          <>
            {favoritePosts.length > 0 ? (
              favoritePosts.map((post: PostProps) => (
                <PostCard key={post.id} {...post} />
              ))
            ) : (
              <div className="post__empty">There are no favorite posts üò≠</div>
            )}
          </>
        )}
        <PostModal /> {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞ */}
      </div>
      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "All" –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç*/}
      {showPaginationAndSelector && posts.length > 0 && (
        <div className="pagination__container">
          <Pagination />
          <div>
            <span className="pagination__label">Posts per page: </span>
            <select
              onChange={handlePostsPerPageChange}
              className="posts-per-page"
              value={postsPerPage}
            >
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="50">50</option>
            </select>
          </div>
        </div>
      )}
    </div>
  );
};

export default PostList;
