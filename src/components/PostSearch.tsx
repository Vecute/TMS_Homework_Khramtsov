import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { PostCard } from './PostCard';
import useSearch from '../customHooks/useSearch';
import Pagination from '../services/searchPagination';
import "../styles/PostSearch.scss";

const PostSearch = () => {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Redux
  const posts = useSelector((state: RootState) => state.postsReducer.allPosts); 
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—É–∫ useNavigate –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const navigate = useNavigate(); 
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ö—É–∫–∞ useSearch
  const { searchQuery } = useSearch(); 
  // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const [currentPage, setCurrentPage] = useState(1);
  // –ó–∞–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const postsPerPage = 20;

  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredPosts = posts.filter((post) => 
    post.title.toLowerCase().includes(searchQuery.toLowerCase()) 
  );

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
  const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber); 
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const startIndex = (currentPage - 1) * postsPerPage;
  const endIndex = startIndex + postsPerPage;
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const currentPosts = filteredPosts.slice(startIndex, endIndex);

  return (
    <div className="search-list">
      {/* –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö */}
      {currentPosts.length > 0 ? (
        currentPosts.map((post) => <PostCard key={post.id} {...post} />) 
      ) : (
        // –ò–Ω–∞—á–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        <div className="search-empty">No posts found üò≠</div> 
      )}

      {/* –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ 1, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */}
      {totalPages > 1 && (
        <Pagination 
          totalPages={totalPages} 
          currentPage={currentPage} 
          onPageChange={handlePageChange} 
        />
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ –≤—Å–µ–º–∏ –ø–æ—Å—Ç–∞–º–∏ */}
      <button onClick={() => navigate("/posts")} className="buttonBack">
        Return to posts
      </button>
    </div>
  );
};

export default PostSearch;